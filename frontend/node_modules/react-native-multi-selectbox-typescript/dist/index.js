"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const lodash_1 = require("lodash");
const react_native_1 = require("react-native");
const Colors_1 = __importDefault(require("./src/constants/Colors"));
const Icon_1 = __importDefault(require("./src/components/Icon"));
const Toggle_1 = __importDefault(require("./src/components/Toggle"));
const hitSlop = { top: 14, bottom: 14, left: 14, right: 14 };
const kOptionsHeight = { width: '100%', maxHeight: 180 };
const kOptionListViewStyle = {
    width: '100%',
    alignItems: 'center',
    paddingVertical: 4,
};
const renderItemStyle = { flexShrink: 1 };
function SelectBox({ labelStyle, containerStyle, inputFilterContainerStyle, inputFilterStyle, optionsLabelStyle, optionContainerStyle, multiOptionContainerStyle, multiOptionsLabelStyle, multiListEmptyLabelStyle, listEmptyLabelStyle, selectedItemStyle, listEmptyText = 'No results found', listOptionProps, ...props }) {
    const [inputValue, setInputValue] = react_1.useState('');
    const [showOptions, setShowOptions] = react_1.useState(false);
    function renderLabel(item) {
        const kOptionsLabelStyle = {
            fontSize: 17,
            color: 'rgba(60, 60, 67, 0.6)',
            ...optionsLabelStyle,
        };
        return react_1.default.createElement(react_native_1.Text, { style: kOptionsLabelStyle }, item);
    }
    function renderItem({ item }) {
        const { isMulti, onChange, onMultiSelect, selectedValues } = props;
        const kOptionContainerStyle = {
            borderColor: '#dadada',
            borderBottomWidth: 1,
            width: '100%',
            flexDirection: 'row',
            alignItems: 'center',
            backgroundColor: '#fff',
            paddingVertical: 12,
            paddingRight: 10,
            justifyContent: 'space-between',
            ...optionContainerStyle,
        };
        return (react_1.default.createElement(react_native_1.View, { style: kOptionContainerStyle }, isMulti ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(react_native_1.TouchableOpacity, { hitSlop: hitSlop, style: renderItemStyle, onPress: onPressMultiItem() }, renderLabel(item.item)),
            react_1.default.createElement(Toggle_1.default, { iconColor: toggleIconColor, checked: selectedValues && selectedValues.indexOf(item) > -1, onTouch: onPressMultiItem() }))) : (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(react_native_1.TouchableOpacity, { hitSlop: hitSlop, style: renderItemStyle, onPress: onPressItem() },
                renderLabel(item.item),
                react_1.default.createElement(react_native_1.View, null))))));
        function onPressMultiItem() {
            return (_e) => onMultiSelect ? onMultiSelect(item) : null;
        }
        function onPressItem() {
            return (_e) => {
                setShowOptions(false);
                return onChange ? onChange(item) : null;
            };
        }
    }
    function renderGroupItem({ item }) {
        const { onTapClose, options } = props;
        const label = lodash_1.find(options, o => o.id === item.id);
        const kMultiOptionContainerStyle = {
            flexDirection: 'row',
            borderRadius: 20,
            paddingVertical: 5,
            paddingRight: 5,
            paddingLeft: 10,
            marginRight: 4,
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: Colors_1.default.primary,
            flexGrow: 1,
            ...multiOptionContainerStyle,
        };
        const kMultiOptionsLabelStyle = {
            fontSize: 10,
            color: '#fff',
            ...multiOptionsLabelStyle,
        };
        return (react_1.default.createElement(react_native_1.View, { style: kMultiOptionContainerStyle },
            react_1.default.createElement(react_native_1.Text, { style: kMultiOptionsLabelStyle }, label?.item),
            react_1.default.createElement(react_native_1.TouchableOpacity
            // eslint-disable-next-line react-native/no-inline-styles
            , { 
                // eslint-disable-next-line react-native/no-inline-styles
                style: { marginLeft: 15 }, hitSlop: hitSlop, onPress: onPressItem() },
                react_1.default.createElement(Icon_1.default, { name: "closeCircle", fill: "#fff", width: 21, height: 21 }))));
        function onPressItem() {
            return (_e) => (onTapClose ? onTapClose(item) : null);
        }
    }
    const { selectIcon, label, inputPlaceholder = 'Select', hideInputFilter, width = '100%', isMulti, options, value, selectedValues, arrowIconColor = Colors_1.default.primary, searchIconColor = Colors_1.default.primary, toggleIconColor = Colors_1.default.primary, searchInputProps, multiSelectInputFieldProps, } = props;
    const filteredSuggestions = react_1.useMemo(() => options?.filter(suggestion => suggestion.item.toLowerCase().indexOf(inputValue.toLowerCase()) > -1), [inputValue, options]);
    function multiListEmptyComponent() {
        const kMultiListEmptyLabelStyle = {
            fontSize: 17,
            color: 'rgba(60, 60, 67, 0.3)',
            ...multiListEmptyLabelStyle,
        };
        return (react_1.default.createElement(react_native_1.TouchableOpacity
        //@ts-ignore
        , { 
            //@ts-ignore
            width: "100%", 
            // eslint-disable-next-line react-native/no-inline-styles
            style: { flexGrow: 1, width: '100%' }, hitSlop: hitSlop, onPress: onPressShowOptions() },
            react_1.default.createElement(react_native_1.Text, { style: kMultiListEmptyLabelStyle }, inputPlaceholder)));
    }
    function optionListEmpty() {
        const kListEmptyLabelStyle = {
            fontSize: 17,
            color: 'rgba(60, 60, 67, 0.6)',
            ...listEmptyLabelStyle,
        };
        return (react_1.default.createElement(react_native_1.View, { style: kOptionListViewStyle },
            react_1.default.createElement(react_native_1.Text, { style: kListEmptyLabelStyle }, listEmptyText)));
    }
    const kLabelStyle = {
        fontSize: 12,
        color: 'rgba(60, 60, 67, 0.6)',
        paddingBottom: 4,
        ...labelStyle,
    };
    const kContainerStyle = {
        flexDirection: 'row',
        width: '100%',
        borderColor: '#ddd',
        borderBottomWidth: 1,
        paddingTop: 6,
        paddingRight: 20,
        paddingBottom: 8,
        ...containerStyle,
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(react_native_1.View, { style: {
                width,
            } },
            react_1.default.createElement(react_native_1.Text, { style: kLabelStyle }, label),
            react_1.default.createElement(react_native_1.View, { style: kContainerStyle },
                react_1.default.createElement(react_native_1.View
                // eslint-disable-next-line react-native/no-inline-styles
                , { 
                    // eslint-disable-next-line react-native/no-inline-styles
                    style: { paddingRight: 20, flexGrow: 1 } }, isMulti ? (react_1.default.createElement(react_native_1.FlatList, Object.assign({ data: selectedValues, extraData: { inputValue, showOptions }, keyExtractor: keyExtractor(), renderItem: renderGroupItem, horizontal: true, ListEmptyComponent: multiListEmptyComponent }, multiSelectInputFieldProps))) : (react_1.default.createElement(react_native_1.TouchableOpacity, { hitSlop: hitSlop, onPress: onPressShowOptions() },
                    react_1.default.createElement(react_native_1.Text, { style: kSelectedItemStyle() }, value?.item || inputPlaceholder || label)))),
                react_1.default.createElement(react_native_1.TouchableOpacity, { onPress: onPressShowOptions(), hitSlop: hitSlop }, selectIcon ? (selectIcon) : (react_1.default.createElement(Icon_1.default, { name: showOptions ? 'upArrow' : 'downArrow', fill: arrowIconColor })))),
            showOptions && (react_1.default.createElement(react_native_1.FlatList, Object.assign({ data: filteredSuggestions || options, extraData: options, keyExtractor: keyExtractor(), renderItem: renderItem, numColumns: 1, horizontal: false, initialNumToRender: 5, maxToRenderPerBatch: 20, windowSize: 10, ListEmptyComponent: optionListEmpty, style: [kOptionsHeight, listOptionProps?.style], ListHeaderComponent: HeaderComponent() }, listOptionProps))))));
    function keyExtractor() {
        return (o) => `${o.id}-${Math.random()}`;
    }
    function kSelectedItemStyle() {
        return {
            fontSize: 17,
            color: lodash_1.isEmpty(value?.item) ? 'rgba(60, 60, 67, 0.3)' : '#000',
            ...selectedItemStyle,
        };
    }
    function HeaderComponent() {
        const kInputFilterContainerStyle = {
            width: '100%',
            borderBottomWidth: 1,
            borderBottomColor: '#ddd',
            flexDirection: 'row',
            alignItems: 'center',
            paddingRight: 18,
            justifyContent: 'space-between',
            ...inputFilterContainerStyle,
        };
        const kInputFilterStyle = {
            paddingVertical: 14,
            paddingRight: 8,
            color: '#000',
            fontSize: 12,
            flexGrow: 1,
            ...inputFilterStyle,
        };
        return (react_1.default.createElement(react_1.default.Fragment, null,
            !hideInputFilter && (react_1.default.createElement(react_native_1.View, { style: kInputFilterContainerStyle },
                react_1.default.createElement(react_native_1.TextInput, Object.assign({ value: inputValue, placeholder: inputPlaceholder, onChangeText: onChangeText(), style: kInputFilterStyle, placeholderTextColor: "#000" }, searchInputProps)),
                react_1.default.createElement(Icon_1.default, { name: "searchBoxIcon", fill: searchIconColor }))),
            react_1.default.createElement(react_native_1.ScrollView, { keyboardShouldPersistTaps: "always" })));
        function onChangeText() {
            return (val) => setInputValue(val);
        }
    }
    function onPressShowOptions() {
        return () => setShowOptions(!showOptions);
    }
}
SelectBox.defaultProps = {
    label: 'Label',
    options: [
        {
            item: 'Aston Villa FC',
            id: 'AVL',
        },
        {
            item: 'West Ham United FC',
            id: 'WHU',
        },
        {
            item: 'Stoke City FC',
            id: 'STK',
        },
        {
            item: 'Sunderland AFC',
            id: 'SUN',
        },
        {
            item: 'Everton FC',
            id: 'EVE',
        },
        {
            item: 'Tottenham Hotspur FC',
            id: 'TOT',
        },
        {
            item: 'Manchester City FC',
            id: 'MCI',
        },
        {
            item: 'Chelsea FC',
            id: 'CHE',
        },
        {
            item: 'West Bromwich Albion FC',
            id: 'WBA',
        },
        {
            item: 'Liverpool FC',
            id: 'LIV',
        },
        {
            item: 'Arsenal FC',
            id: 'ARS',
        },
        {
            item: 'Manchester United FC',
            id: 'MUN',
        },
        {
            item: 'Newcastle United FC',
            id: 'NEW',
        },
        {
            item: 'Norwich City FC',
            id: 'NOR',
        },
        {
            item: 'Watford FC',
            id: 'WAT',
        },
        {
            item: 'Swansea City FC',
            id: 'SWA',
        },
        {
            item: 'Crystal Palace FC',
            id: 'CRY',
        },
        {
            item: 'Leicester City FC',
            id: 'LEI',
        },
        {
            item: 'Southampton FC',
            id: 'SOU',
        },
        {
            item: 'AFC Bournemouth',
            id: 'BOU',
        },
    ],
};
exports.default = react_1.memo(SelectBox);
//# sourceMappingURL=index.js.map